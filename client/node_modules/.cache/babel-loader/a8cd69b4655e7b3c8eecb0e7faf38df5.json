{"ast":null,"code":"var _jsxFileName = \"/Users/zowie/Desktop/chat_box/client/src/components/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./app.scss\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nlet socket;\n\nconst Chat = ({\n  name,\n  room,\n  partner\n}) => {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState([]);\n  const ENDPOINT = \"http://localhost:5000\";\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"join\", {\n      name,\n      room\n    }, () => {});\n    socket.on(\"message_records\", target_room => {\n      setMessages(target_room.user_chats);\n    });\n    return () => {\n      setMessages([]);\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, name, room]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessageHandler = event => {\n    event.preventDefault();\n\n    if (message === \"\") {\n      setError(\"Message can not be empty!\");\n    } else {\n      socket.emit(\"chatMessage\", {\n        time: new Date().toLocaleString({\n          timeZone: \"Asia/Tokyo\"\n        }),\n        message: message,\n        room: room,\n        sender_name: name\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chatBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Chat with \", partner), /*#__PURE__*/React.createElement(Scrollbars, {\n    style: {\n      height: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, messages.length !== 0 && messages.map(m => /*#__PURE__*/React.createElement(\"div\", {\n    className: m.sender_name === name ? \"self\" : \"partner\",\n    key: m._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, m.message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, m.time)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"10\",\n    className: \"inputTextarea\",\n    value: message,\n    placeholder: \"Type here\",\n    onChange: e => {\n      setMessage(e.target.value);\n    },\n    onKeyPress: event => event.key === \"Enter\" ? setMessage(message + \"\\n\") : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), error !== null && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 28\n    }\n  }, error), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"messageSendButton\",\n    type: \"text\",\n    onClick: event => sendMessageHandler(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Send\"))));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/zowie/Desktop/chat_box/client/src/components/Chat.js"],"names":["React","useState","useEffect","io","Scrollbars","socket","Chat","name","room","partner","messages","setMessages","message","setMessage","error","setError","ENDPOINT","emit","on","target_room","user_chats","off","sendMessageHandler","event","preventDefault","time","Date","toLocaleString","timeZone","sender_name","height","length","map","m","_id","e","target","value","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./app.scss\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\n\nlet socket;\n\nconst Chat = ({ name, room, partner }) => {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState([]);\n\n  const ENDPOINT = \"http://localhost:5000\";\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"join\", { name, room }, () => {});\n    socket.on(\"message_records\", (target_room) => {\n      setMessages(target_room.user_chats);\n    });\n\n    return () => {\n      setMessages([]);\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, name, room]);\n\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessageHandler = (event) => {\n    event.preventDefault();\n    if (message === \"\") {\n      setError(\"Message can not be empty!\");\n    } else {\n      socket.emit(\"chatMessage\", {\n        time: new Date().toLocaleString({ timeZone: \"Asia/Tokyo\" }),\n        message: message,\n        room: room,\n        sender_name: name,\n      });\n    }\n  };\n\n  return (\n    <div className=\"chatBox\">\n      <h1>Chat with {partner}</h1>\n\n      <Scrollbars style={{ height: 500 }}>\n        {messages.length !== 0 &&\n          messages.map((m) => (\n            <div\n              className={m.sender_name === name ? \"self\" : \"partner\"}\n              key={m._id}\n            >\n              <div className=\"message\">{m.message}</div>\n              <div className=\"time\">{m.time}</div>\n            </div>\n          ))}\n      </Scrollbars>\n\n      <div>\n        <div>\n          <textarea\n            rows=\"10\"\n            className=\"inputTextarea\"\n            value={message}\n            placeholder=\"Type here\"\n            onChange={(e) => {\n              setMessage(e.target.value);\n            }}\n            onKeyPress={(event) =>\n              event.key === \"Enter\" ? setMessage(message + \"\\n\") : null\n            }\n          />\n        </div>\n        {error !== null && <p>{error}</p>}\n        <div>\n          <button\n            className=\"messageSendButton\"\n            type=\"text\"\n            onClick={(event) => sendMessageHandler(event)}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}